// Code generated by mockery v1.0.0. DO NOT EDIT.

// +build test

package mocked

import mock "github.com/stretchr/testify/mock"
import sql "database/sql"
import values "github.com/AntonStoeckl/go-iddd/service/customer/domain/customer/values"

// ForCheckingUniqueEmailAddresses is an autogenerated mock type for the ForCheckingUniqueEmailAddresses type
type ForCheckingUniqueEmailAddresses struct {
	mock.Mock
}

// AddUniqueEmailAddress provides a mock function with given fields: emailAddress, tx
func (_m *ForCheckingUniqueEmailAddresses) AddUniqueEmailAddress(emailAddress values.EmailAddress, tx *sql.Tx) error {
	ret := _m.Called(emailAddress, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.EmailAddress, *sql.Tx) error); ok {
		r0 = rf(emailAddress, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUniqueEmailAddress provides a mock function with given fields: newEmailAddress, tx
func (_m *ForCheckingUniqueEmailAddresses) RemoveUniqueEmailAddress(newEmailAddress values.EmailAddress, tx *sql.Tx) error {
	ret := _m.Called(newEmailAddress, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.EmailAddress, *sql.Tx) error); ok {
		r0 = rf(newEmailAddress, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceUniqueEmailAddress provides a mock function with given fields: previousEmailAddress, newEmailAddress, tx
func (_m *ForCheckingUniqueEmailAddresses) ReplaceUniqueEmailAddress(previousEmailAddress values.EmailAddress, newEmailAddress values.EmailAddress, tx *sql.Tx) error {
	ret := _m.Called(previousEmailAddress, newEmailAddress, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.EmailAddress, values.EmailAddress, *sql.Tx) error); ok {
		r0 = rf(previousEmailAddress, newEmailAddress, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
