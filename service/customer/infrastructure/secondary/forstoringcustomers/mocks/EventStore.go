// Code generated by mockery v1.0.0. DO NOT EDIT.

// +build test

package mocks

import lib "go-iddd/service/lib"
import mock "github.com/stretchr/testify/mock"
import sql "database/sql"

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// AppendEventsToStream provides a mock function with given fields: streamID, events, tx
func (_m *EventStore) AppendEventsToStream(streamID lib.StreamID, events lib.DomainEvents, tx *sql.Tx) error {
	ret := _m.Called(streamID, events, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(lib.StreamID, lib.DomainEvents, *sql.Tx) error); ok {
		r0 = rf(streamID, events, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadEventStream provides a mock function with given fields: streamID, fromVersion, maxEvents
func (_m *EventStore) LoadEventStream(streamID lib.StreamID, fromVersion uint, maxEvents uint) (lib.DomainEvents, error) {
	ret := _m.Called(streamID, fromVersion, maxEvents)

	var r0 lib.DomainEvents
	if rf, ok := ret.Get(0).(func(lib.StreamID, uint, uint) lib.DomainEvents); ok {
		r0 = rf(streamID, fromVersion, maxEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lib.DomainEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(lib.StreamID, uint, uint) error); ok {
		r1 = rf(streamID, fromVersion, maxEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurgeEventStream provides a mock function with given fields: streamID
func (_m *EventStore) PurgeEventStream(streamID lib.StreamID) error {
	ret := _m.Called(streamID)

	var r0 error
	if rf, ok := ret.Get(0).(func(lib.StreamID) error); ok {
		r0 = rf(streamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
