// Code generated by mockery v1.0.0. DO NOT EDIT.

// +build test

package mocks

import es "go-iddd/service/lib/es"
import mock "github.com/stretchr/testify/mock"
import sql "database/sql"
import values "go-iddd/service/customer/application/domain/values"

// ForStoringCustomers is an autogenerated mock type for the ForStoringCustomers type
type ForStoringCustomers struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ForStoringCustomers) Delete(id values.CustomerID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.CustomerID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventStream provides a mock function with given fields: id
func (_m *ForStoringCustomers) EventStream(id values.CustomerID) (es.DomainEvents, error) {
	ret := _m.Called(id)

	var r0 es.DomainEvents
	if rf, ok := ret.Get(0).(func(values.CustomerID) es.DomainEvents); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.DomainEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(values.CustomerID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Persist provides a mock function with given fields: id, recordedEvents, tx
func (_m *ForStoringCustomers) Persist(id values.CustomerID, recordedEvents es.DomainEvents, tx *sql.Tx) error {
	ret := _m.Called(id, recordedEvents, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.CustomerID, es.DomainEvents, *sql.Tx) error); ok {
		r0 = rf(id, recordedEvents, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: id, recordedEvents, tx
func (_m *ForStoringCustomers) Register(id values.CustomerID, recordedEvents es.DomainEvents, tx *sql.Tx) error {
	ret := _m.Called(id, recordedEvents, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.CustomerID, es.DomainEvents, *sql.Tx) error); ok {
		r0 = rf(id, recordedEvents, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
