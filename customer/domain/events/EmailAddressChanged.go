// Code generated by generate/main.go. DO NOT EDIT.

package events

import (
	"go-iddd/customer/domain/values"
	"go-iddd/shared"
	"reflect"
	"strings"
	"time"

	"github.com/cockroachdb/errors"
	jsoniter "github.com/json-iterator/go"
)

const (
	emailAddressChangedAggregateName       = "Customer"
	EmailAddressChangedMetaTimestampFormat = time.RFC3339Nano
)

type EmailAddressChanged struct {
	id                      *values.ID
	confirmableEmailAddress *values.ConfirmableEmailAddress

	meta *emailAddressChangedMeta
}

type emailAddressChangedMeta struct {
	Identifier    string `json:"identifier"`
	EventName     string `json:"eventName"`
	OccurredAt    string `json:"occurredAt"`
	StreamVersion uint   `json:"streamVersion"`
}

/*** Factory Methods ***/

func EmailAddressWasChanged(
	id *values.ID,
	confirmableEmailAddress *values.ConfirmableEmailAddress,
	streamVersion uint,
) *EmailAddressChanged {

	emailAddressChanged := &EmailAddressChanged{
		id:                      id,
		confirmableEmailAddress: confirmableEmailAddress,
	}

	eventType := reflect.TypeOf(emailAddressChanged).String()
	eventTypeParts := strings.Split(eventType, ".")
	eventName := eventTypeParts[len(eventTypeParts)-1]
	eventName = strings.Title(eventName)
	fullEventName := emailAddressChangedAggregateName + eventName

	emailAddressChanged.meta = &emailAddressChangedMeta{
		Identifier:    id.String(),
		EventName:     fullEventName,
		OccurredAt:    time.Now().Format(EmailAddressChangedMetaTimestampFormat),
		StreamVersion: streamVersion,
	}

	return emailAddressChanged
}

/*** Getter Methods ***/

func (emailAddressChanged *EmailAddressChanged) ID() *values.ID {
	return emailAddressChanged.id
}

func (emailAddressChanged *EmailAddressChanged) ConfirmableEmailAddress() *values.ConfirmableEmailAddress {
	return emailAddressChanged.confirmableEmailAddress
}

/*** Implement shared.DomainEvent ***/

func (emailAddressChanged *EmailAddressChanged) Identifier() string {
	return emailAddressChanged.meta.Identifier
}

func (emailAddressChanged *EmailAddressChanged) EventName() string {
	return emailAddressChanged.meta.EventName
}

func (emailAddressChanged *EmailAddressChanged) OccurredAt() string {
	return emailAddressChanged.meta.OccurredAt
}

func (emailAddressChanged *EmailAddressChanged) StreamVersion() uint {
	return emailAddressChanged.meta.StreamVersion
}

/*** Implement json.Marshaler ***/

func (emailAddressChanged *EmailAddressChanged) MarshalJSON() ([]byte, error) {
	data := &struct {
		ID                      *values.ID                      `json:"id"`
		ConfirmableEmailAddress *values.ConfirmableEmailAddress `json:"confirmableEmailAddress"`
		Meta                    *emailAddressChangedMeta        `json:"meta"`
	}{
		ID:                      emailAddressChanged.id,
		ConfirmableEmailAddress: emailAddressChanged.confirmableEmailAddress,
		Meta:                    emailAddressChanged.meta,
	}

	return jsoniter.Marshal(data)
}

/*** Implement json.Unmarshaler ***/

func (emailAddressChanged *EmailAddressChanged) UnmarshalJSON(data []byte) error {
	unmarshaledData := &struct {
		ID                      *values.ID                      `json:"id"`
		ConfirmableEmailAddress *values.ConfirmableEmailAddress `json:"confirmableEmailAddress"`
		Meta                    *emailAddressChangedMeta        `json:"meta"`
	}{}

	if err := jsoniter.Unmarshal(data, unmarshaledData); err != nil {
		return errors.Wrap(errors.Mark(err, shared.ErrUnmarshalingFailed), "emailAddressChanged.UnmarshalJSON")
	}

	emailAddressChanged.id = unmarshaledData.ID
	emailAddressChanged.confirmableEmailAddress = unmarshaledData.ConfirmableEmailAddress
	emailAddressChanged.meta = unmarshaledData.Meta

	return nil
}
