// Code generated by generate/main.go. DO NOT EDIT.

package events

import (
	"encoding/json"
	"go-iddd/customer/domain/values"
	"go-iddd/shared"

	"golang.org/x/xerrors"
)

const emailAddressChangedAggregateName = "Customer"

type EmailAddressChanged struct {
	id           *values.ID
	emailAddress *values.EmailAddress

	meta *shared.DomainEventMeta
}

/*** Factory Methods ***/

func EmailAddressWasChanged(
	id *values.ID,
	emailAddress *values.EmailAddress,
	streamVersion uint,
) *EmailAddressChanged {

	emailAddressChanged := &EmailAddressChanged{
		id:           id,
		emailAddress: emailAddress,
	}

	emailAddressChanged.meta = shared.NewDomainEventMeta(
		id.String(),
		emailAddressChanged,
		emailAddressChangedAggregateName,
		streamVersion,
	)

	return emailAddressChanged
}

/*** Getter Methods ***/

func (emailAddressChanged *EmailAddressChanged) ID() *values.ID {
	return emailAddressChanged.id
}

func (emailAddressChanged *EmailAddressChanged) EmailAddress() *values.EmailAddress {
	return emailAddressChanged.emailAddress
}

/*** Implement shared.DomainEvent ***/

func (emailAddressChanged *EmailAddressChanged) Identifier() string {
	return emailAddressChanged.meta.Identifier
}

func (emailAddressChanged *EmailAddressChanged) EventName() string {
	return emailAddressChanged.meta.EventName
}

func (emailAddressChanged *EmailAddressChanged) OccurredAt() string {
	return emailAddressChanged.meta.OccurredAt
}

func (emailAddressChanged *EmailAddressChanged) StreamVersion() uint {
	return emailAddressChanged.meta.StreamVersion
}

/*** Implement json.Marshaler ***/

func (emailAddressChanged *EmailAddressChanged) MarshalJSON() ([]byte, error) {
	data := &struct {
		ID           *values.ID              `json:"id"`
		EmailAddress *values.EmailAddress    `json:"emailAddress"`
		Meta         *shared.DomainEventMeta `json:"meta"`
	}{
		ID:           emailAddressChanged.id,
		EmailAddress: emailAddressChanged.emailAddress,
		Meta:         emailAddressChanged.meta,
	}

	return json.Marshal(data)
}

/*** Implement json.Unmarshaler ***/

func (emailAddressChanged *EmailAddressChanged) UnmarshalJSON(data []byte) error {
	unmarshaledData := &struct {
		ID           *values.ID              `json:"id"`
		EmailAddress *values.EmailAddress    `json:"emailAddress"`
		Meta         *shared.DomainEventMeta `json:"meta"`
	}{}

	if err := json.Unmarshal(data, unmarshaledData); err != nil {
		return xerrors.Errorf("emailAddressChanged.UnmarshalJSON: %s: %w", err, shared.ErrUnmarshalingFailed)
	}

	emailAddressChanged.id = unmarshaledData.ID
	emailAddressChanged.emailAddress = unmarshaledData.EmailAddress
	emailAddressChanged.meta = unmarshaledData.Meta

	return nil
}
