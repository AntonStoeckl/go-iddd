// Code generated by generate/main.go. DO NOT EDIT.

package events

import (
	"go-iddd/customer/domain/values"
	"go-iddd/shared"
	"reflect"
	"strings"
	"time"

	"github.com/cockroachdb/errors"
	jsoniter "github.com/json-iterator/go"
)

const (
	emailAddressConfirmationFailedAggregateName       = "Customer"
	EmailAddressConfirmationFailedMetaTimestampFormat = time.RFC3339Nano
)

type EmailAddressConfirmationFailed struct {
	id               *values.ID
	confirmationHash *values.ConfirmationHash

	meta *emailAddressConfirmationFailedMeta
}

type emailAddressConfirmationFailedMeta struct {
	Identifier    string `json:"identifier"`
	EventName     string `json:"eventName"`
	OccurredAt    string `json:"occurredAt"`
	StreamVersion uint   `json:"streamVersion"`
}

/*** Factory Methods ***/

func EmailAddressConfirmationHasFailed(
	id *values.ID,
	confirmationHash *values.ConfirmationHash,
	streamVersion uint,
) *EmailAddressConfirmationFailed {

	emailAddressConfirmationFailed := &EmailAddressConfirmationFailed{
		id:               id,
		confirmationHash: confirmationHash,
	}

	eventType := reflect.TypeOf(emailAddressConfirmationFailed).String()
	eventTypeParts := strings.Split(eventType, ".")
	eventName := eventTypeParts[len(eventTypeParts)-1]
	eventName = strings.Title(eventName)
	fullEventName := emailAddressConfirmationFailedAggregateName + eventName

	emailAddressConfirmationFailed.meta = &emailAddressConfirmationFailedMeta{
		Identifier:    id.String(),
		EventName:     fullEventName,
		OccurredAt:    time.Now().Format(EmailAddressConfirmationFailedMetaTimestampFormat),
		StreamVersion: streamVersion,
	}

	return emailAddressConfirmationFailed
}

/*** Getter Methods ***/

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) ID() *values.ID {
	return emailAddressConfirmationFailed.id
}

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) ConfirmationHash() *values.ConfirmationHash {
	return emailAddressConfirmationFailed.confirmationHash
}

/*** Implement shared.DomainEvent ***/

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) Identifier() string {
	return emailAddressConfirmationFailed.meta.Identifier
}

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) EventName() string {
	return emailAddressConfirmationFailed.meta.EventName
}

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) OccurredAt() string {
	return emailAddressConfirmationFailed.meta.OccurredAt
}

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) StreamVersion() uint {
	return emailAddressConfirmationFailed.meta.StreamVersion
}

/*** Implement json.Marshaler ***/

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) MarshalJSON() ([]byte, error) {
	data := &struct {
		ID               *values.ID                          `json:"id"`
		ConfirmationHash *values.ConfirmationHash            `json:"confirmationHash"`
		Meta             *emailAddressConfirmationFailedMeta `json:"meta"`
	}{
		ID:               emailAddressConfirmationFailed.id,
		ConfirmationHash: emailAddressConfirmationFailed.confirmationHash,
		Meta:             emailAddressConfirmationFailed.meta,
	}

	return jsoniter.Marshal(data)
}

/*** Implement json.Unmarshaler ***/

func (emailAddressConfirmationFailed *EmailAddressConfirmationFailed) UnmarshalJSON(data []byte) error {
	unmarshaledData := &struct {
		ID               *values.ID                          `json:"id"`
		ConfirmationHash *values.ConfirmationHash            `json:"confirmationHash"`
		Meta             *emailAddressConfirmationFailedMeta `json:"meta"`
	}{}

	if err := jsoniter.Unmarshal(data, unmarshaledData); err != nil {
		return errors.Wrap(errors.Mark(err, shared.ErrUnmarshalingFailed), "emailAddressConfirmationFailed.UnmarshalJSON")
	}

	emailAddressConfirmationFailed.id = unmarshaledData.ID
	emailAddressConfirmationFailed.confirmationHash = unmarshaledData.ConfirmationHash
	emailAddressConfirmationFailed.meta = unmarshaledData.Meta

	return nil
}
