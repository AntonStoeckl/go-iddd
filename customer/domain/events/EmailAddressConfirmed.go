// Code generated by generate/main.go. DO NOT EDIT.

package events

import (
	"go-iddd/customer/domain/values"
	"go-iddd/shared"
	"reflect"
	"strings"
	"time"

	jsoniter "github.com/json-iterator/go"
	"golang.org/x/xerrors"
)

const (
	emailAddressConfirmedAggregateName       = "Customer"
	EmailAddressConfirmedMetaTimestampFormat = time.RFC3339Nano
)

type EmailAddressConfirmed struct {
	id           *values.ID
	emailAddress *values.EmailAddress

	meta *emailAddressConfirmedMeta
}

type emailAddressConfirmedMeta struct {
	Identifier    string `json:"identifier"`
	EventName     string `json:"eventName"`
	OccurredAt    string `json:"occurredAt"`
	StreamVersion uint   `json:"streamVersion"`
}

/*** Factory Methods ***/

func EmailAddressWasConfirmed(
	id *values.ID,
	emailAddress *values.EmailAddress,
	streamVersion uint,
) *EmailAddressConfirmed {

	emailAddressConfirmed := &EmailAddressConfirmed{
		id:           id,
		emailAddress: emailAddress,
	}

	eventType := reflect.TypeOf(emailAddressConfirmed).String()
	eventTypeParts := strings.Split(eventType, ".")
	eventName := eventTypeParts[len(eventTypeParts)-1]
	eventName = strings.Title(eventName)
	fullEventName := emailAddressConfirmedAggregateName + eventName

	emailAddressConfirmed.meta = &emailAddressConfirmedMeta{
		Identifier:    id.String(),
		EventName:     fullEventName,
		OccurredAt:    time.Now().Format(EmailAddressConfirmedMetaTimestampFormat),
		StreamVersion: streamVersion,
	}

	return emailAddressConfirmed
}

/*** Getter Methods ***/

func (emailAddressConfirmed *EmailAddressConfirmed) ID() *values.ID {
	return emailAddressConfirmed.id
}

func (emailAddressConfirmed *EmailAddressConfirmed) EmailAddress() *values.EmailAddress {
	return emailAddressConfirmed.emailAddress
}

/*** Implement shared.DomainEvent ***/

func (emailAddressConfirmed *EmailAddressConfirmed) Identifier() string {
	return emailAddressConfirmed.meta.Identifier
}

func (emailAddressConfirmed *EmailAddressConfirmed) EventName() string {
	return emailAddressConfirmed.meta.EventName
}

func (emailAddressConfirmed *EmailAddressConfirmed) OccurredAt() string {
	return emailAddressConfirmed.meta.OccurredAt
}

func (emailAddressConfirmed *EmailAddressConfirmed) StreamVersion() uint {
	return emailAddressConfirmed.meta.StreamVersion
}

/*** Implement json.Marshaler ***/

func (emailAddressConfirmed *EmailAddressConfirmed) MarshalJSON() ([]byte, error) {
	data := &struct {
		ID           *values.ID                 `json:"id"`
		EmailAddress *values.EmailAddress       `json:"emailAddress"`
		Meta         *emailAddressConfirmedMeta `json:"meta"`
	}{
		ID:           emailAddressConfirmed.id,
		EmailAddress: emailAddressConfirmed.emailAddress,
		Meta:         emailAddressConfirmed.meta,
	}

	return jsoniter.Marshal(data)
}

/*** Implement json.Unmarshaler ***/

func (emailAddressConfirmed *EmailAddressConfirmed) UnmarshalJSON(data []byte) error {
	unmarshaledData := &struct {
		ID           *values.ID                 `json:"id"`
		EmailAddress *values.EmailAddress       `json:"emailAddress"`
		Meta         *emailAddressConfirmedMeta `json:"meta"`
	}{}

	if err := jsoniter.Unmarshal(data, unmarshaledData); err != nil {
		return xerrors.Errorf("emailAddressConfirmed.UnmarshalJSON: %s: %w", err, shared.ErrUnmarshalingFailed)
	}

	emailAddressConfirmed.id = unmarshaledData.ID
	emailAddressConfirmed.emailAddress = unmarshaledData.EmailAddress
	emailAddressConfirmed.meta = unmarshaledData.Meta

	return nil
}
