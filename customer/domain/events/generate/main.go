// +buil generator

//go:generate go run main.go

package main

import (
	"bytes"
	"errors"
	"io"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"unicode"
	"unicode/utf8"

	"github.com/joncalhoun/pipe"
)

const mode = "format" // "format", "noformat", "stdout"

type Field struct {
	FieldName string
	DataType  string
}

type Event struct {
	EventType    string
	EventFactory string
	Fields       []Field
}

var events = []Event{
	{
		EventType:    "Registered",
		EventFactory: "ItWasRegistered",
		Fields: []Field{
			{FieldName: "id", DataType: "*values.ID"},
			{FieldName: "confirmableEmailAddress", DataType: "*values.ConfirmableEmailAddress"},
			{FieldName: "personName", DataType: "*values.PersonName"},
		},
	},
	{
		EventType:    "EmailAddressConfirmed",
		EventFactory: "EmailAddressWasConfirmed",
		Fields: []Field{
			{FieldName: "id", DataType: "*values.ID"},
			{FieldName: "emailAddress", DataType: "*values.EmailAddress"},
		},
	},
}

type Config struct {
	RelativeOutputPath string
	Events             []Event
}

var config = Config{
	RelativeOutputPath: "..",
}

func main() {
	generateEvents()
	generateTestsForEvents()
}

func generateEvents() {
	var err error

	methodName := func(input string) string {
		parts := strings.Split(input, ".")
		return parts[1]
	}

	lcFirst := func(s string) string {
		if s == "" {
			return ""
		}
		r, n := utf8.DecodeRuneInString(s)
		return string(unicode.ToLower(r)) + s[n:]
	}

	tick := func() string { return "`" }

	for _, event := range events {
		t := template.New(event.EventType)

		t = t.Funcs(
			template.FuncMap{
				"title":      strings.Title,
				"methodName": methodName,
				"eventName":  t.Name,
				"lcFirst":    lcFirst,
				"tick":       tick,
			},
		)

		t, err = t.Parse(eventTemplate)
		die(err)

		switch mode {
		case "format":
			outFile, err := os.Create(config.RelativeOutputPath + "/" + strings.Title(event.EventType) + ".go")
			die(err)

			rc, wc, _ := pipe.Commands(
				exec.Command("gofmt"),
				exec.Command("goimports"),
			)

			err = t.Execute(wc, event)
			die(err)

			err = wc.Close()
			die(err)

			_, err = io.Copy(outFile, rc)
			die(err)
		case "noformat":
			outFile, err := os.Create(config.RelativeOutputPath + "/" + strings.Title(event.EventType) + ".go")
			die(err)

			err = t.Execute(outFile, event)
			die(err)
		case "stdout":
			err = t.Execute(os.Stdout, event)
			die(err)
		}
	}
}

func generateTestsForEvents() {
	var err error

	methodName := func(input string) string {
		parts := strings.Split(input, ".")
		return parts[1]
	}

	lcFirst := func(s string) string {
		if s == "" {
			return ""
		}
		r, n := utf8.DecodeRuneInString(s)
		return string(unicode.ToLower(r)) + s[n:]
	}

	valueFactoryForTestTemplates := map[string]string{
		"id":                      idFactoryForTestTemplate,
		"emailAddress":            emailAddressFactoryForTestTemplate,
		"confirmableEmailAddress": confirmableEmailAddressFactoryForTestTemplate,
		"personName":              personNameFactoryForTestTemplate,
	}

	valueFactoryForTest := func(templateName string) string {
		t := template.New("valueFactoryForTest")

		tpl, found := valueFactoryForTestTemplates[templateName]
		if !found {
			die(errors.New("could not find valueFactoryForTest template for: " + templateName))
		}

		t, err = t.Parse(tpl)
		die(err)

		buf := bytes.NewBuffer([]byte{})
		err = t.Execute(buf, false)
		die(err)

		return buf.String()
	}

	for _, event := range events {
		t := template.New(event.EventType)

		t = t.Funcs(
			template.FuncMap{
				"title":               strings.Title,
				"methodName":          methodName,
				"eventName":           t.Name,
				"lcFirst":             lcFirst,
				"valueFactoryForTest": valueFactoryForTest,
			},
		)

		t, err = t.Parse(testTemplate)
		die(err)

		switch mode {
		case "format":
			outFile, err := os.Create(config.RelativeOutputPath + "/" + strings.Title(event.EventType) + "_test.go")
			die(err)

			rc, wc, _ := pipe.Commands(
				exec.Command("gofmt"),
				exec.Command("goimports"),
			)

			err = t.Execute(wc, event)
			die(err)

			err = wc.Close()
			die(err)

			_, err = io.Copy(outFile, rc)
			die(err)
		case "noformat":
			outFile, err := os.Create(config.RelativeOutputPath + "/" + strings.Title(event.EventType) + "_test2.go")
			die(err)

			err = t.Execute(outFile, event)
			die(err)
		case "stdout":
			err = t.Execute(os.Stdout, event)
			die(err)
		}
	}
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var eventTemplate = `
{{$eventVar := lcFirst eventName}}
// Code generated by generate/main.go. DO NOT EDIT.

package events

import (
	"encoding/json"
	"go-iddd/customer/domain/values"
	"go-iddd/shared"

	"golang.org/x/xerrors"
)

const {{lcFirst eventName}}AggregateName = "Customer"

type {{eventName}} struct {
	{{range .Fields}}{{.FieldName}} {{.DataType}}
	{{end}}
	meta *shared.DomainEventMeta
}

/*** Factory Methods ***/

func {{.EventFactory}}(
	{{range .Fields}}{{.FieldName}} {{.DataType}},
	{{end -}}
) *{{eventName}} {

	{{$eventVar}} := &{{eventName}}{
		{{range .Fields}}{{.FieldName}}: {{.FieldName}},
		{{end -}}
	}

	{{$eventVar}}.meta = shared.NewDomainEventMeta(
		id.String(),
		{{$eventVar}},
		{{lcFirst eventName}}AggregateName,
	)

	return {{$eventVar}}
}

/*** Getter Methods ***/

{{range .Fields}}
func ({{$eventVar}} *{{eventName}}) {{methodName .DataType}}() {{.DataType}} {
	return {{$eventVar}}.{{.FieldName}}
}
{{end}}

/*** Implement shared.DomainEvent ***/

func ({{$eventVar}} *{{eventName}}) Identifier() string {
	return {{$eventVar}}.meta.Identifier
}

func ({{$eventVar}} *{{eventName}}) EventName() string {
	return {{$eventVar}}.meta.EventName
}

func ({{$eventVar}} *{{eventName}}) OccurredAt() string {
	return {{$eventVar}}.meta.OccurredAt
}

/*** Implement json.Marshaler ***/

func ({{$eventVar}} *{{eventName}}) MarshalJSON() ([]byte, error) {
	data := &struct {
		{{range .Fields}}{{methodName .DataType}} {{.DataType}} {{tick}}json:"{{.FieldName}}"{{tick}}
		{{end -}}
		Meta *shared.DomainEventMeta {{tick}}json:"meta"{{tick}}
	}{
		{{range .Fields}}{{methodName .DataType}}: {{$eventVar}}.{{.FieldName}},
		{{end -}}
		Meta: {{$eventVar}}.meta,
	}

	return json.Marshal(data)
}

/*** Implement json.Unmarshaler ***/

func ({{$eventVar}} *{{eventName}}) UnmarshalJSON(data []byte) error {
	unmarshaledData := &struct {
		{{range .Fields}}{{methodName .DataType}} {{.DataType}} {{tick}}json:"{{.FieldName}}"{{tick}}
		{{end -}}
		Meta *shared.DomainEventMeta {{tick}}json:"meta"{{tick}}
	}{}

	if err := json.Unmarshal(data, unmarshaledData); err != nil {
		return xerrors.Errorf("{{$eventVar}}.UnmarshalJSON: %s: %w", err, shared.ErrUnmarshalingFailed)
	}

	{{range .Fields}}{{$eventVar}}.{{.FieldName}} = unmarshaledData.{{methodName .DataType}}
	{{end -}}

	{{$eventVar}}.meta = unmarshaledData.Meta

	return nil
}
`

var idFactoryForTestTemplate = `
	id := values.GenerateID()
`

var emailAddressFactoryForTestTemplate = `
	emailAddress, err := values.NewEmailAddress("foo@bar.com")
	So(err, ShouldBeNil)
`

var confirmableEmailAddressFactoryForTestTemplate = `
	emailAddress, err := values.NewEmailAddress("foo@bar.com")
	So(err, ShouldBeNil)
	confirmableEmailAddress := emailAddress.ToConfirmable()
`

var personNameFactoryForTestTemplate = `
	personName, err := values.NewPersonName("John", "Doe")
	So(err, ShouldBeNil)
`

var testTemplate = `
{{$eventVar := lcFirst eventName}}

package events_test

import (
	"go-iddd/customer/domain/events"
	"go-iddd/customer/domain/values"
	"go-iddd/shared"
	"testing"
	"time"

	. "github.com/smartystreets/goconvey/convey"
	"golang.org/x/xerrors"
)

func Test{{.EventFactory}}(t *testing.T) {
	Convey("Given valid parameters as input", t, func() {
		{{- range .Fields}}{{valueFactoryForTest .FieldName}}
		{{end -}}

		Convey("When a new {{eventName}} event is created", func() {
			{{$eventVar}} := events.{{.EventFactory}}({{range .Fields}}{{.FieldName}}, {{end}})

			Convey("It should succeed", func() {
				So({{$eventVar}}, ShouldNotBeNil)
				So({{$eventVar}}, ShouldHaveSameTypeAs, (*events.{{eventName}})(nil))
			})
		})
	})
}

func Test{{eventName}}ExposesExpectedValues(t *testing.T) {
	Convey("Given a {{eventName}} event", t, func() {
		{{- range .Fields}}{{valueFactoryForTest .FieldName}}
		{{end -}}
		beforeItOccurred := time.Now()
		{{$eventVar}} := events.{{.EventFactory}}({{range .Fields}}{{.FieldName}}, {{end}})
		afterItOccurred := time.Now()
		So({{$eventVar}}, ShouldNotBeNil)
		So({{$eventVar}}, ShouldHaveSameTypeAs, (*events.{{eventName}})(nil))

		Convey("It should expose the expected values", func() {
			{{range .Fields}}So({{$eventVar}}.{{methodName .DataType}}(), ShouldResemble, {{.FieldName}})
			{{end -}}
			So({{$eventVar}}.Identifier(), ShouldEqual, id.String())
			So({{$eventVar}}.EventName(), ShouldEqual, "Customer{{eventName}}")
			itOccurred, err := time.Parse(shared.DomainEventMetaTimestampFormat, {{$eventVar}}.OccurredAt())
			So(err, ShouldBeNil)
			So(beforeItOccurred, ShouldHappenBefore, itOccurred)
			So(afterItOccurred, ShouldHappenAfter, itOccurred)
		})
	})
}

func Test{{eventName}}MarshalJSON(t *testing.T) {
	Convey("Given a {{eventName}} event", t, func() {
		{{- range .Fields}}{{valueFactoryForTest .FieldName}}
		{{end -}}

		{{$eventVar}} := events.{{.EventFactory}}({{range .Fields}}{{.FieldName}}, {{end}})
		So({{$eventVar}}, ShouldNotBeNil)
		So({{$eventVar}}, ShouldHaveSameTypeAs, (*events.{{eventName}})(nil))

		Convey("When it is marshaled to json", func() {
			data, err := {{$eventVar}}.MarshalJSON()

			Convey("It should create the expected json", func() {
				So(err, ShouldBeNil)
				So(string(data), ShouldStartWith, "{")
				So(string(data), ShouldEndWith, "}")
			})
		})
	})
}

func Test{{eventName}}UnmarshalJSON(t *testing.T) {
	Convey("Given a {{eventName}} event marshaled to json", t, func() {
		{{- range .Fields}}{{valueFactoryForTest .FieldName}}
		{{end -}}

		{{$eventVar}} := events.{{.EventFactory}}({{range .Fields}}{{.FieldName}}, {{end}})
		So({{$eventVar}}, ShouldNotBeNil)
		So({{$eventVar}}, ShouldHaveSameTypeAs, (*events.{{eventName}})(nil))

		data, err := {{$eventVar}}.MarshalJSON()

		Convey("And when it is unmarshaled", func() {
			unmarshaled := &events.{{eventName}}{}
			err := unmarshaled.UnmarshalJSON(data)

			Convey("It should be equal to the original {{eventName}} event", func() {
				So(err, ShouldBeNil)
				So({{$eventVar}}, ShouldResemble, unmarshaled)
			})
		})
	})

	Convey("Given invalid json", t, func() {
		data := []byte("666")

		Convey("When it is unmarshaled to {{eventName}} event", func() {
			unmarshaled := &events.{{eventName}}{}
			err := unmarshaled.UnmarshalJSON(data)

			Convey("It should fail", func() {
				So(err, ShouldNotBeNil)
				So(xerrors.Is(err, shared.ErrUnmarshalingFailed), ShouldBeTrue)
			})
		})
	})
}
`
