// Code generated by generate/main.go. DO NOT EDIT.

package events_test

import (
	"go-iddd/customer/domain/events"
	"go-iddd/customer/domain/values"
	"go-iddd/shared"
	"testing"
	"time"

	"github.com/cockroachdb/errors"
	. "github.com/smartystreets/goconvey/convey"
)

func TestEmailAddressConfirmationHasFailed(t *testing.T) {
	Convey("Given valid parameters as input", t, func() {
		id := values.GenerateID()
		confirmationHash := values.GenerateConfirmationHash("secret_hash")

		Convey("When a new EmailAddressConfirmationFailed event is created", func() {
			streamVersion := uint(1)
			emailAddressConfirmationFailed := events.EmailAddressConfirmationHasFailed(id, confirmationHash, streamVersion)

			Convey("It should succeed", func() {
				So(emailAddressConfirmationFailed, ShouldNotBeNil)
				So(emailAddressConfirmationFailed, ShouldImplement, (*shared.DomainEvent)(nil))
				So(emailAddressConfirmationFailed, ShouldHaveSameTypeAs, (*events.EmailAddressConfirmationFailed)(nil))
			})
		})
	})
}

func TestEmailAddressConfirmationFailedExposesExpectedValues(t *testing.T) {
	Convey("Given a EmailAddressConfirmationFailed event", t, func() {
		id := values.GenerateID()
		confirmationHash := values.GenerateConfirmationHash("secret_hash")
		streamVersion := uint(1)

		beforeItOccurred := time.Now()
		emailAddressConfirmationFailed := events.EmailAddressConfirmationHasFailed(id, confirmationHash, streamVersion)
		afterItOccurred := time.Now()

		Convey("It should expose the expected values", func() {
			So(emailAddressConfirmationFailed.ID(), ShouldResemble, id)
			So(emailAddressConfirmationFailed.ConfirmationHash(), ShouldResemble, confirmationHash)
			So(emailAddressConfirmationFailed.Identifier(), ShouldEqual, id.String())
			So(emailAddressConfirmationFailed.EventName(), ShouldEqual, "CustomerEmailAddressConfirmationFailed")
			itOccurred, err := time.Parse(events.EmailAddressConfirmationFailedMetaTimestampFormat, emailAddressConfirmationFailed.OccurredAt())
			So(err, ShouldBeNil)
			So(beforeItOccurred, ShouldHappenBefore, itOccurred)
			So(afterItOccurred, ShouldHappenAfter, itOccurred)
			So(emailAddressConfirmationFailed.StreamVersion(), ShouldEqual, streamVersion)
		})
	})
}

func TestEmailAddressConfirmationFailedMarshalJSON(t *testing.T) {
	Convey("Given a EmailAddressConfirmationFailed event", t, func() {
		id := values.GenerateID()
		confirmationHash := values.GenerateConfirmationHash("secret_hash")
		streamVersion := uint(1)

		emailAddressConfirmationFailed := events.EmailAddressConfirmationHasFailed(id, confirmationHash, streamVersion)

		Convey("When it is marshaled to json", func() {
			data, err := emailAddressConfirmationFailed.MarshalJSON()

			Convey("It should create the expected json", func() {
				So(err, ShouldBeNil)
				So(string(data), ShouldStartWith, "{")
				So(string(data), ShouldEndWith, "}")
			})
		})
	})
}

func TestEmailAddressConfirmationFailedUnmarshalJSON(t *testing.T) {
	Convey("Given a EmailAddressConfirmationFailed event marshaled to json", t, func() {
		id := values.GenerateID()
		confirmationHash := values.GenerateConfirmationHash("secret_hash")
		streamVersion := uint(1)

		emailAddressConfirmationFailed := events.EmailAddressConfirmationHasFailed(id, confirmationHash, streamVersion)

		data, err := emailAddressConfirmationFailed.MarshalJSON()
		So(err, ShouldBeNil)

		Convey("When it is unmarshaled", func() {
			unmarshaled := &events.EmailAddressConfirmationFailed{}
			err := unmarshaled.UnmarshalJSON(data)

			Convey("It should be equal to the original EmailAddressConfirmationFailed event", func() {
				So(err, ShouldBeNil)
				So(emailAddressConfirmationFailed, ShouldResemble, unmarshaled)
			})
		})
	})

	Convey("Given invalid json", t, func() {
		data := []byte("666")

		Convey("When it is unmarshaled to EmailAddressConfirmationFailed event", func() {
			unmarshaled := &events.EmailAddressConfirmationFailed{}
			err := unmarshaled.UnmarshalJSON(data)

			Convey("It should fail", func() {
				So(err, ShouldNotBeNil)
				So(errors.Is(err, shared.ErrUnmarshalingFailed), ShouldBeTrue)
			})
		})
	})
}
