// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import shared "go-iddd/shared"

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// AppendToStream provides a mock function with given fields: streamID, events
func (_m *EventStore) AppendToStream(streamID *shared.StreamID, events shared.DomainEvents) error {
	ret := _m.Called(streamID, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(*shared.StreamID, shared.DomainEvents) error); ok {
		r0 = rf(streamID, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadEventStream provides a mock function with given fields: streamID
func (_m *EventStore) LoadEventStream(streamID *shared.StreamID) (shared.DomainEvents, error) {
	ret := _m.Called(streamID)

	var r0 shared.DomainEvents
	if rf, ok := ret.Get(0).(func(*shared.StreamID) shared.DomainEvents); ok {
		r0 = rf(streamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.DomainEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shared.StreamID) error); ok {
		r1 = rf(streamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPartialEventStream provides a mock function with given fields: streamID, fromVersion, maxEvents
func (_m *EventStore) LoadPartialEventStream(streamID *shared.StreamID, fromVersion uint, maxEvents uint) (shared.DomainEvents, error) {
	ret := _m.Called(streamID, fromVersion, maxEvents)

	var r0 shared.DomainEvents
	if rf, ok := ret.Get(0).(func(*shared.StreamID, uint, uint) shared.DomainEvents); ok {
		r0 = rf(streamID, fromVersion, maxEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.DomainEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shared.StreamID, uint, uint) error); ok {
		r1 = rf(streamID, fromVersion, maxEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
