// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "go-iddd/customer/domain"
import mock "github.com/stretchr/testify/mock"
import shared "go-iddd/shared"
import values "go-iddd/customer/domain/values"

// CustomersWithPersistance is an autogenerated mock type for the CustomersWithPersistance type
type CustomersWithPersistance struct {
	mock.Mock
}

// Of provides a mock function with given fields: id
func (_m *CustomersWithPersistance) Of(id *values.ID) (domain.Customer, error) {
	ret := _m.Called(id)

	var r0 domain.Customer
	if rf, ok := ret.Get(0).(func(*values.ID) domain.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*values.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Persist provides a mock function with given fields: aggregate
func (_m *CustomersWithPersistance) Persist(aggregate shared.EventRecordingAggregate) error {
	ret := _m.Called(aggregate)

	var r0 error
	if rf, ok := ret.Get(0).(func(shared.EventRecordingAggregate) error); ok {
		r0 = rf(aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: customer
func (_m *CustomersWithPersistance) Register(customer domain.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
