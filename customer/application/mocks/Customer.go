// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "go-iddd/customer/domain"
import mock "github.com/stretchr/testify/mock"
import shared "go-iddd/shared"

// Customer is an autogenerated mock type for the Customer type
type Customer struct {
	mock.Mock
}

// AggregateID provides a mock function with given fields:
func (_m *Customer) AggregateID() shared.IdentifiesAggregates {
	ret := _m.Called()

	var r0 shared.IdentifiesAggregates
	if rf, ok := ret.Get(0).(func() shared.IdentifiesAggregates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.IdentifiesAggregates)
		}
	}

	return r0
}

// AggregateName provides a mock function with given fields:
func (_m *Customer) AggregateName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Apply provides a mock function with given fields: latestEvents
func (_m *Customer) Apply(latestEvents shared.DomainEvents) {
	_m.Called(latestEvents)
}

// Clone provides a mock function with given fields:
func (_m *Customer) Clone() domain.Customer {
	ret := _m.Called()

	var r0 domain.Customer
	if rf, ok := ret.Get(0).(func() domain.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Customer)
		}
	}

	return r0
}

// Execute provides a mock function with given fields: server
func (_m *Customer) Execute(cmd shared.Command) error {
	ret := _m.Called(cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(shared.Command) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordedEvents provides a mock function with given fields: purge
func (_m *Customer) RecordedEvents(purge bool) shared.DomainEvents {
	ret := _m.Called(purge)

	var r0 shared.DomainEvents
	if rf, ok := ret.Get(0).(func(bool) shared.DomainEvents); ok {
		r0 = rf(purge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.DomainEvents)
		}
	}

	return r0
}

// StreamVersion provides a mock function with given fields:
func (_m *Customer) StreamVersion() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
