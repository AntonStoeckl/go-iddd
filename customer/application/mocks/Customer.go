// Code generated by mockery v1.0.0. DO NOT EDIT.

// +build test

package mocks

import commands "go-iddd/customer/domain/commands"

import mock "github.com/stretchr/testify/mock"
import shared "go-iddd/shared"

// Customer is an autogenerated mock type for the Customer type
type Customer struct {
	mock.Mock
}

// Apply provides a mock function with given fields: latestEvents
func (_m *Customer) Apply(latestEvents shared.DomainEvents) {
	_m.Called(latestEvents)
}

// ChangeEmailAddress provides a mock function with given fields: with
func (_m *Customer) ChangeEmailAddress(with *commands.ChangeEmailAddress) error {
	ret := _m.Called(with)

	var r0 error
	if rf, ok := ret.Get(0).(func(*commands.ChangeEmailAddress) error); ok {
		r0 = rf(with)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmEmailAddress provides a mock function with given fields: with
func (_m *Customer) ConfirmEmailAddress(with *commands.ConfirmEmailAddress) error {
	ret := _m.Called(with)

	var r0 error
	if rf, ok := ret.Get(0).(func(*commands.ConfirmEmailAddress) error); ok {
		r0 = rf(with)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Customer) ID() shared.IdentifiesAggregates {
	ret := _m.Called()

	var r0 shared.IdentifiesAggregates
	if rf, ok := ret.Get(0).(func() shared.IdentifiesAggregates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.IdentifiesAggregates)
		}
	}

	return r0
}

// RecordedEvents provides a mock function with given fields: purge
func (_m *Customer) RecordedEvents(purge bool) shared.DomainEvents {
	ret := _m.Called(purge)

	var r0 shared.DomainEvents
	if rf, ok := ret.Get(0).(func(bool) shared.DomainEvents); ok {
		r0 = rf(purge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.DomainEvents)
		}
	}

	return r0
}

// StreamVersion provides a mock function with given fields:
func (_m *Customer) StreamVersion() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
